
STM32F4XX_DRIVERS_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000678  08000680  00001680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000678  08000678  00001680  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000678  08000678  00001680  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000678  08000680  00001680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000678  08000678  00001678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800067c  0800067c  0000167c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000680  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000680  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000088a  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000289  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  000021c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000079  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002017  00000000  00000000  000022e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001059  00000000  00000000  00004300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008d1a  00000000  00000000  00005359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000e073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001fc  00000000  00000000  0000e0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0000e2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000660 	.word	0x08000660

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000660 	.word	0x08000660

08000204 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d157      	bne.n	80002c6 <GPIO_PeriClockControl+0xc2>
	    {
	        if(pGPIOx == GPIOA)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a59      	ldr	r2, [pc, #356]	@ (8000380 <GPIO_PeriClockControl+0x17c>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x28>
	        {
	            GPIOA_PCLK_EN();
 800021e:	4b59      	ldr	r3, [pc, #356]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	4a58      	ldr	r2, [pc, #352]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	@ 0x30
	        else if(pGPIOx == GPIOH)
	        {
	            GPIOH_PCLK_DI();
	        }
	    }
}
 800022a:	e0a3      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOB)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a56      	ldr	r2, [pc, #344]	@ (8000388 <GPIO_PeriClockControl+0x184>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x3e>
	            GPIOB_PCLK_EN();
 8000234:	4b53      	ldr	r3, [pc, #332]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000238:	4a52      	ldr	r2, [pc, #328]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000240:	e098      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOC)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a51      	ldr	r2, [pc, #324]	@ (800038c <GPIO_PeriClockControl+0x188>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x54>
	            GPIOC_PCLK_EN();
 800024a:	4b4e      	ldr	r3, [pc, #312]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024e:	4a4d      	ldr	r2, [pc, #308]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000256:	e08d      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOD)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a4d      	ldr	r2, [pc, #308]	@ (8000390 <GPIO_PeriClockControl+0x18c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_PeriClockControl+0x6a>
	            GPIOD_PCLK_EN();
 8000260:	4b48      	ldr	r3, [pc, #288]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000264:	4a47      	ldr	r2, [pc, #284]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800026c:	e082      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOE)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a48      	ldr	r2, [pc, #288]	@ (8000394 <GPIO_PeriClockControl+0x190>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0x80>
	            GPIOE_PCLK_EN();
 8000276:	4b43      	ldr	r3, [pc, #268]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027a:	4a42      	ldr	r2, [pc, #264]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000282:	e077      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOF)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a44      	ldr	r2, [pc, #272]	@ (8000398 <GPIO_PeriClockControl+0x194>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClockControl+0x96>
	            GPIOF_PCLK_EN();
 800028c:	4b3d      	ldr	r3, [pc, #244]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000290:	4a3c      	ldr	r2, [pc, #240]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000298:	e06c      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOG)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a3f      	ldr	r2, [pc, #252]	@ (800039c <GPIO_PeriClockControl+0x198>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClockControl+0xac>
	            GPIOG_PCLK_EN();
 80002a2:	4b38      	ldr	r3, [pc, #224]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a6:	4a37      	ldr	r2, [pc, #220]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ae:	e061      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOH)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a3b      	ldr	r2, [pc, #236]	@ (80003a0 <GPIO_PeriClockControl+0x19c>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d15d      	bne.n	8000374 <GPIO_PeriClockControl+0x170>
	            GPIOH_PCLK_EN();
 80002b8:	4b32      	ldr	r3, [pc, #200]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002bc:	4a31      	ldr	r2, [pc, #196]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c4:	e056      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        if(pGPIOx == GPIOA)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a2d      	ldr	r2, [pc, #180]	@ (8000380 <GPIO_PeriClockControl+0x17c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PeriClockControl+0xd8>
	            GPIOA_PCLK_DI();
 80002ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002da:	e04b      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOB)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a2a      	ldr	r2, [pc, #168]	@ (8000388 <GPIO_PeriClockControl+0x184>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PeriClockControl+0xee>
	            GPIOB_PCLK_DI();
 80002e4:	4b27      	ldr	r3, [pc, #156]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e8:	4a26      	ldr	r2, [pc, #152]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f0:	e040      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOC)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a25      	ldr	r2, [pc, #148]	@ (800038c <GPIO_PeriClockControl+0x188>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PeriClockControl+0x104>
	            GPIOC_PCLK_DI();
 80002fa:	4b22      	ldr	r3, [pc, #136]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fe:	4a21      	ldr	r2, [pc, #132]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000300:	f023 0304 	bic.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000306:	e035      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOD)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a21      	ldr	r2, [pc, #132]	@ (8000390 <GPIO_PeriClockControl+0x18c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriClockControl+0x11a>
	            GPIOD_PCLK_DI();
 8000310:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000314:	4a1b      	ldr	r2, [pc, #108]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000316:	f023 0308 	bic.w	r3, r3, #8
 800031a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800031c:	e02a      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOE)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a1c      	ldr	r2, [pc, #112]	@ (8000394 <GPIO_PeriClockControl+0x190>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x130>
	            GPIOE_PCLK_DI();
 8000326:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032a:	4a16      	ldr	r2, [pc, #88]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000332:	e01f      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOF)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a18      	ldr	r2, [pc, #96]	@ (8000398 <GPIO_PeriClockControl+0x194>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x146>
	            GPIOF_PCLK_DI();
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000340:	4a10      	ldr	r2, [pc, #64]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000342:	f023 0320 	bic.w	r3, r3, #32
 8000346:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000348:	e014      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOG)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a13      	ldr	r2, [pc, #76]	@ (800039c <GPIO_PeriClockControl+0x198>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x15c>
	            GPIOG_PCLK_DI();
 8000352:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000356:	4a0b      	ldr	r2, [pc, #44]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800035c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035e:	e009      	b.n	8000374 <GPIO_PeriClockControl+0x170>
	        else if(pGPIOx == GPIOH)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a0f      	ldr	r2, [pc, #60]	@ (80003a0 <GPIO_PeriClockControl+0x19c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d105      	bne.n	8000374 <GPIO_PeriClockControl+0x170>
	            GPIOH_PCLK_DI();
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036c:	4a05      	ldr	r2, [pc, #20]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40020000 	.word	0x40020000
 8000384:	40023800 	.word	0x40023800
 8000388:	40020400 	.word	0x40020400
 800038c:	40020800 	.word	0x40020800
 8000390:	40020c00 	.word	0x40020c00
 8000394:	40021000 	.word	0x40021000
 8000398:	40021400 	.word	0x40021400
 800039c:	40021800 	.word	0x40021800
 80003a0:	40021c00 	.word	0x40021c00

080003a4 <GPIO_Init>:

	}//Else End

}// API ENDS HERE

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]

	//1.Configure the mode of the GPIO Pin

	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	795b      	ldrb	r3, [r3, #5]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d81d      	bhi.n	80003f4 <GPIO_Init+0x50>
		// The above condition is for Modes other that  Interrupts because that gonna require some other configuration
		// The non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber) );
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	795b      	ldrb	r3, [r3, #5]
 80003bc:	461a      	mov	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	791b      	ldrb	r3, [r3, #4]
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	fa02 f303 	lsl.w	r3, r2, r3
 80003c8:	60fb      	str	r3, [r7, #12]
		// it will be multiplied by 2 and results in = 2
		// So the pin Mode value will be left shifted 2 times. like that...

		// Storing the temp value in the actual register
		//Before storing the value make sure the register is cleared
		pGPIOHandle->pGPIOx->MODER &= (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinMode); // Clearing
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	4619      	mov	r1, r3
 80003d6:	2303      	movs	r3, #3
 80003d8:	408b      	lsls	r3, r1
 80003da:	4619      	mov	r1, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	400a      	ands	r2, r1
 80003e2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx ->MODER |= temp;// Setting
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	6819      	ldr	r1, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
	}
	else{
		// This part will code later. Interrupt mode
	}

	temp = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	799b      	ldrb	r3, [r3, #6]
 80003fc:	461a      	mov	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	791b      	ldrb	r3, [r3, #4]
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	fa02 f303 	lsl.w	r3, r2, r3
 8000408:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDER &= (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinMode); // Clearing
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	689a      	ldr	r2, [r3, #8]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	795b      	ldrb	r3, [r3, #5]
 8000414:	4619      	mov	r1, r3
 8000416:	2303      	movs	r3, #3
 8000418:	408b      	lsls	r3, r1
 800041a:	4619      	mov	r1, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	400a      	ands	r2, r1
 8000422:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	6899      	ldr	r1, [r3, #8]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	430a      	orrs	r2, r1
 8000432:	609a      	str	r2, [r3, #8]

	temp= 0;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]

	//3. Configure the pupd settings
	temp= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	79db      	ldrb	r3, [r3, #7]
 800043c:	461a      	mov	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinMode); // Clearing
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	68da      	ldr	r2, [r3, #12]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	4619      	mov	r1, r3
 8000456:	2303      	movs	r3, #3
 8000458:	408b      	lsls	r3, r1
 800045a:	4619      	mov	r1, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	400a      	ands	r2, r1
 8000462:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	68d9      	ldr	r1, [r3, #12]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	430a      	orrs	r2, r1
 8000472:	60da      	str	r2, [r3, #12]

	temp=0;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]

	//4. Congigure the output type
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	7a1b      	ldrb	r3, [r3, #8]
 800047c:	461a      	mov	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinMode); // Clearing
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	685a      	ldr	r2, [r3, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	795b      	ldrb	r3, [r3, #5]
 8000492:	4619      	mov	r1, r3
 8000494:	2301      	movs	r3, #1
 8000496:	408b      	lsls	r3, r1
 8000498:	4619      	mov	r1, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	400a      	ands	r2, r1
 80004a0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6859      	ldr	r1, [r3, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	430a      	orrs	r2, r1
 80004b0:	605a      	str	r2, [r3, #4]

	temp =0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]

	//5. Configure the Alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	795b      	ldrb	r3, [r3, #5]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d131      	bne.n	8000522 <GPIO_Init+0x17e>
		// The AFR is divided into lower and higher register
		// Necessary Mathematics has to be done to deliver the values to the appropriate register and bit position

		uint8_t temp1,temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8 ;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	08db      	lsrs	r3, r3, #3
 80004c4:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8 ;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	791b      	ldrb	r3, [r3, #4]
 80004ca:	f003 0307 	and.w	r3, r3, #7
 80004ce:	72bb      	strb	r3, [r7, #10]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2)); // Clearing
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	7afa      	ldrb	r2, [r7, #11]
 80004d6:	3208      	adds	r2, #8
 80004d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004dc:	7abb      	ldrb	r3, [r7, #10]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	220f      	movs	r2, #15
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	43db      	mvns	r3, r3
 80004e8:	4618      	mov	r0, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	7afa      	ldrb	r2, [r7, #11]
 80004f0:	4001      	ands	r1, r0
 80004f2:	3208      	adds	r2, #8
 80004f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2 ));
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	7afa      	ldrb	r2, [r7, #11]
 80004fe:	3208      	adds	r2, #8
 8000500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7a5b      	ldrb	r3, [r3, #9]
 8000508:	461a      	mov	r2, r3
 800050a:	7abb      	ldrb	r3, [r7, #10]
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	4618      	mov	r0, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	7afa      	ldrb	r2, [r7, #11]
 800051a:	4301      	orrs	r1, r0
 800051c:	3208      	adds	r2, #8
 800051e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}


}// Function ENds
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <GPIO_ToggleOutputPin>:

	pGPIOx->ODR = Value;

}//Function ENds here

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	78fa      	ldrb	r2, [r7, #3]
 800053e:	2101      	movs	r1, #1
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	405a      	eors	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	615a      	str	r2, [r3, #20]
}// FUNCTION ends here
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <delay>:
#include "STM32F446XX.h"


void delay(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000; i++);
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	e002      	b.n	8000566 <delay+0x12>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a04      	ldr	r2, [pc, #16]	@ (800057c <delay+0x28>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d9f8      	bls.n	8000560 <delay+0xc>

}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	0007a11f 	.word	0x0007a11f

08000580 <main>:

int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOA;
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <main+0x40>)
 8000588:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800058a:	2305      	movs	r3, #5
 800058c:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800058e:	2301      	movs	r3, #1
 8000590:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000592:	2302      	movs	r3, #2
 8000594:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP	;
 8000596:	2300      	movs	r3, #0
 8000598:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800059a:	2300      	movs	r3, #0
 800059c:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 800059e:	2101      	movs	r1, #1
 80005a0:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <main+0x40>)
 80005a2:	f7ff fe2f 	bl	8000204 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fefb 	bl	80003a4 <GPIO_Init>

	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA,GPIO_PIN_NO_5);
 80005ae:	2105      	movs	r1, #5
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <main+0x40>)
 80005b2:	f7ff ffbb 	bl	800052c <GPIO_ToggleOutputPin>
		delay();
 80005b6:	f7ff ffcd 	bl	8000554 <delay>
		GPIO_ToggleOutputPin(GPIOA,GPIO_PIN_NO_5);
 80005ba:	bf00      	nop
 80005bc:	e7f7      	b.n	80005ae <main+0x2e>
 80005be:	bf00      	nop
 80005c0:	40020000 	.word	0x40020000

080005c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c4:	480d      	ldr	r0, [pc, #52]	@ (80005fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480c      	ldr	r0, [pc, #48]	@ (8000600 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ce:	490d      	ldr	r1, [pc, #52]	@ (8000604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <LoopForever+0xe>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000610 <LoopForever+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005f2:	f000 f811 	bl	8000618 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80005f6:	f7ff ffc3 	bl	8000580 <main>

080005fa <LoopForever>:

LoopForever:
  b LoopForever
 80005fa:	e7fe      	b.n	80005fa <LoopForever>
  ldr   r0, =_estack
 80005fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000608:	08000680 	.word	0x08000680
  ldr r2, =_sbss
 800060c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000610:	2000001c 	.word	0x2000001c

08000614 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC_IRQHandler>
	...

08000618 <__libc_init_array>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	4d0d      	ldr	r5, [pc, #52]	@ (8000650 <__libc_init_array+0x38>)
 800061c:	4c0d      	ldr	r4, [pc, #52]	@ (8000654 <__libc_init_array+0x3c>)
 800061e:	1b64      	subs	r4, r4, r5
 8000620:	10a4      	asrs	r4, r4, #2
 8000622:	2600      	movs	r6, #0
 8000624:	42a6      	cmp	r6, r4
 8000626:	d109      	bne.n	800063c <__libc_init_array+0x24>
 8000628:	4d0b      	ldr	r5, [pc, #44]	@ (8000658 <__libc_init_array+0x40>)
 800062a:	4c0c      	ldr	r4, [pc, #48]	@ (800065c <__libc_init_array+0x44>)
 800062c:	f000 f818 	bl	8000660 <_init>
 8000630:	1b64      	subs	r4, r4, r5
 8000632:	10a4      	asrs	r4, r4, #2
 8000634:	2600      	movs	r6, #0
 8000636:	42a6      	cmp	r6, r4
 8000638:	d105      	bne.n	8000646 <__libc_init_array+0x2e>
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000640:	4798      	blx	r3
 8000642:	3601      	adds	r6, #1
 8000644:	e7ee      	b.n	8000624 <__libc_init_array+0xc>
 8000646:	f855 3b04 	ldr.w	r3, [r5], #4
 800064a:	4798      	blx	r3
 800064c:	3601      	adds	r6, #1
 800064e:	e7f2      	b.n	8000636 <__libc_init_array+0x1e>
 8000650:	08000678 	.word	0x08000678
 8000654:	08000678 	.word	0x08000678
 8000658:	08000678 	.word	0x08000678
 800065c:	0800067c 	.word	0x0800067c

08000660 <_init>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	bf00      	nop
 8000664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000666:	bc08      	pop	{r3}
 8000668:	469e      	mov	lr, r3
 800066a:	4770      	bx	lr

0800066c <_fini>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	bf00      	nop
 8000670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000672:	bc08      	pop	{r3}
 8000674:	469e      	mov	lr, r3
 8000676:	4770      	bx	lr
